//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./1_types');
//HELPER FUNCTIONS AND STRUCTURES

ThriftTest.ThriftTest_plus_args = function(args) {
  this.num1 = null;
  this.num2 = null;
  if (args) {
    if (args.num1 !== undefined && args.num1 !== null) {
      this.num1 = args.num1;
    }
    if (args.num2 !== undefined && args.num2 !== null) {
      this.num2 = args.num2;
    }
  }
};
ThriftTest.ThriftTest_plus_args.prototype = {};
ThriftTest.ThriftTest_plus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.num1 = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.num2 = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest.ThriftTest_plus_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_plus_args');
  if (this.num1 !== null && this.num1 !== undefined) {
    output.writeFieldBegin('num1', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.num1);
    output.writeFieldEnd();
  }
  if (this.num2 !== null && this.num2 !== undefined) {
    output.writeFieldBegin('num2', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.num2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftTest.ThriftTest_plus_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ThriftTest.ThriftTest_plus_result.prototype = {};
ThriftTest.ThriftTest_plus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.DOUBLE) {
        this.success = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftTest.ThriftTest_plus_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftTest_plus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.DOUBLE, 0);
    output.writeDouble(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftTest.ThriftTestClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ThriftTest.ThriftTestClient.prototype = {};
ThriftTest.ThriftTestClient.prototype.seqid = function() { return this._seqid; }
ThriftTest.ThriftTestClient.prototype.new_seqid = function() { return this._seqid += 1; }
ThriftTest.ThriftTestClient.prototype.plus = function(num1, num2, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_plus(num1, num2);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_plus(num1, num2);
  }
};

ThriftTest.ThriftTestClient.prototype.send_plus = function(num1, num2) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('plus', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftTest.ThriftTest_plus_args();
  args.num1 = num1;
  args.num2 = num2;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftTest.ThriftTestClient.prototype.recv_plus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftTest.ThriftTest_plus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('plus failed: unknown result');
};
ThriftTest.ThriftTestProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ThriftTest.ThriftTestProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ThriftTest.ThriftTestProcessor.prototype.process_plus = function(seqid, input, output) {
  var args = new ThriftTest.ThriftTest_plus_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.plus.length === 2) {
    Q.fcall(this._handler.plus, args.num1, args.num2)
      .then(function(result) {
        var result = new ThriftTest.ThriftTest_plus_result({success: result});
        output.writeMessageBegin("plus", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("plus", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.plus(args.num1, args.num2, function (err, result) {
      if (err == null) {
        var result = new ThriftTest.ThriftTest_plus_result((err != null ? err : {success: result}));
        output.writeMessageBegin("plus", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("plus", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

